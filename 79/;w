#include "../solution.h"
class Solution {
public:
    bool exist(vector<vector<char> >& board, string word) {
        int str_len = word.length();
        int board_height = board.size();
        int board_width = board[0].size();
        vector<vector<bool> > trace(board_height, vector<bool>(false, board_width));
        for(int i=0; i<board_height; i++){
            for(int j=0; j<board_width; j++){
                trace[i][j] = true;
                if(recursion(board, trace, word, i, j, 0))
                    return true;
                trace[i][j] = false;
            }
        }
        return false;
    }

    bool recursion(vector<vector<char> > &board, vector<vector<bool> >&trace, string word, int row_pos, int col_pos, int str_pos){
        if(str_pos == (int)word.length())
            return true;
        int is_exist = false;

        // top
        if(row_pos-1 >= 0 && !trace[row_pos-1][col_pos] && board[row_pos-1][col_pos] == word[str_pos]){
            trace[row_pos-1][col_pos] = true;
            is_exist = recursion(board, trace, word, row_pos-1, col_pos, str_pos+1);
            trace[row_pos-1][col_pos] = false;
        }
        if(is_exist) return true;

        // bottom
        if(row_pos+1 <= (int)board.size()-1 && !trace[row_pos+1][col_pos] && board[row_pos+1][col_pos] == word[str_pos]){
            trace[row_pos+1][col_pos] = true;
            is_exist = recursion(board, trace, word, row_pos+1, col_pos, str_pos+1);
            trace[row_pos+1][col_pos] = false;
        }
        if(is_exist) return true;

        // left
        if(col_pos-1 >=0 && !trace[row_pos][col_pos-1] && board[row_pos][col_pos-1] == word[str_pos]){
            trace[row_pos][col_pos-1] = true;
            is_exist = recursion(board, trace, word, row_pos, col_pos-1, str_pos+1);
            trace[row_pos][col_pos-1] = false;
        }
        if(is_exist) return true;

        // left
        if(col_pos+1<=(int)board[0].size() && !trace[row_pos][col_pos+1] && board[row_pos][col_pos+1] == word[str_pos]){
            trace[row_pos][col_pos+1] = true;
            is_exist = recursion(board, trace, word, row_pos, col_pos+1, str_pos+1);
            trace[row_pos][col_pos+1] = false;
        }
        return is_exist;
    }
};
